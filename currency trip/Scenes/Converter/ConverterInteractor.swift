//
//  converterInteractor.swift
//  currency trip
//
//  Created by Guillermo Costa on 6/2/19.
//  Copyright (c) 2019 Guillermo Costa. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//


protocol ConverterBusinessLogic {
    func convert(request: Currency.Fetch.ViewModel)
    func fetch()
}

protocol ConverterDataStore {
    var baseCurrency: Currency.Fetch.ViewModel? { get }
    var currencies: [Currency.Fetch.ViewModel]? { get set }
}

class ConverterInteractor: ConverterDataStore {
    private (set) var baseCurrency: Currency.Fetch.ViewModel?
    private let baseCurrencyCode = "USD"
    var currencies: [Currency.Fetch.ViewModel]? {
        didSet {
            guard let currencies = currencies else { return }
            baseCurrency = obtainBaseCurrency(of: currencies)
        }
    }
    var presenter: ConverterPresentationLogic?
    var worker: ConverterWorker?
    
  
    init() {
        presenter = ConverterPresenter()
        worker = ConverterWorker()
    }
}

extension ConverterInteractor: ConverterBusinessLogic {
    
    func convert(request: Currency.Fetch.ViewModel) {
        let convertedCurrencies = [Currency.Fetch.ViewModel]()
        self.presenter?.presentConvertedCurrencies(viewModel: convertedCurrencies)
    }
    
    func fetch() {
        let worker = self.worker ?? ConverterWorker()
        worker.fetchCurrencies(completion: { (result: Currency.Fetch.State) in
            switch result {
            case .success(response: let response):
                self.currencies = response
                self.presenter?.presentCurrencies(viewModel: response)
            case .error(error: let message):
                print(message)
                self.presenter?.presentCurrenciesFetchingError(response: message)
            }
        })
    }
    
    private func obtainBaseCurrency(of currencies: [Currency.Fetch.ViewModel]) -> Currency.Fetch.ViewModel? {
        return currencies
            .filter { $0.code == baseCurrencyCode }
            .first ?? nil
    }
}
